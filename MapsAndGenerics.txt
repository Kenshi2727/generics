                                                  MAPS AND GENERICS ASSIGNMENT
                                                  ============================


1)*A Map is an interface that represents a collection of key-value pairs,where each key and value pair is known as an entry.
  *A map contains unique keys.
  *A map is uesful if you have to search,update or delete elements on the basis of a key.

Example-
-------

LinkedHashMap lhm=new LinkedHashMap();

lhm.put("Virat","Rohit");
lhm.put("Rohit","Rohan");
lhm.put("Hyder","Rohan");
System.out.println(lhm);

Output-  {Virat=Rohit,Rohit=Rohan,Hyder=Rohan}
------


2)The three primary classes that represents Map in Java are-

1=>HashMap
  ========
Example-
-------

HashMap hm=new HashMap();

hm.put("Virat","Rohit");
hm.put("Rohit","Rohan");
hm.put("Hyder","Rohan");
System.out.println(hm);

Output-  {Rohit=Rohan,Virat=Rohit,Hyder=Rohan} //ORDER OF INSERTION NOT PRESERVED
------

2=>LinkedHashMap
   =============
Example-
-------

LinkedHashMap lhm=new LinkedHashMap();

lhm.put("Virat","Rohit");
lhm.put("Rohit","Rohan");
lhm.put("Hyder","Rohan");
System.out.println(lhm);

Output-  {Virat=Rohit,Rohit=Rohan,Hyder=Rohan} //ORDER OF INSERTION PRESERVED
------


3=>TreeMap
   =======

Example-
-------

TreeMap tm=new TreehMap();

tm.put(2,"Rohit");
tm.put(1,"Ramesh");
tm.put(4,"Rahul");
tm.put(3,"Rohan");
System.out.println(tm);

Output-  {1=Ramesh,2=Rohit,3=Rohan,4=Rahul}  //ORDER OF INSERTION NOT PRESERVED BUT GIVES DATA IN ASCENDING SORTED ORDER BASED ON KEYS
------




3)HashMap-
 ========
*Order of insertion not preserved.
*It may have one null key and multiple null values.
*It implements Map interface.
*Example-
-------

HashMap hm=new HashMap();

hm.put("Virat","Rohit");
hm.put("Rohit","Rohan");
hm.put("Hyder","Rohan");
System.out.println(hm);

Output-  {Rohit=Rohan,Virat=Rohit,Hyder=Rohan} //ORDER OF INSERTION NOT PRESERVED
------


 TreeMap-
 =======
*Order of insertion not preserved but gives data in ascending sorted order based on keys.
*It cannot have null key but can have multiple null values.
* It implements the NavigableMap interface and extends AbstractMap class.
*Example-
-------

TreeMap tm=new TreehMap();

tm.put(2,"Rohit");
tm.put(1,"Ramesh");
tm.put(4,"Rahul");
tm.put(3,"Rohan");
System.out.println(tm);

Output-  {1=Ramesh,2=Rohit,3=Rohan,4=Rahul}  //ORDER OF INSERTION NOT PRESERVED BUT GIVES DATA IN ASCENDING SORTED ORDER BASED ON KEYS
------



4)We can use the containsKey() method and check if a given key exists in the HashMap or not.We can also use keySet() and then iterate and
 use hasNext() method to check if a key exists in next position or not.


5)*It was introduced from JDK 5.Generics is a feature in Java that allows for the creation of classes,interfaces, and methods that can
  operate on a variety of data types.
  *Generics are implemented using type pararmeters,which are specified inside angle brackets<>.


6)Benefits of using Generics in Java are as follows:
  *It provides compile-time type safety by enabling the specification of the data type of objects that a class or method can work with.
  *The concept of Generics can be applied in classes as well.
  *We can write a method/class/interface once and use it for any type we want.
  * Individual Type Casting is not needed.
  * Promotes Code Reusability.
  *By using generics, we can implement algorithms that work on different types of objects, and at the same, they are type-safe too.


7)A Generic class simply means that the items or functions in that class can be generalized with the parameter(example T or N) to specify
  that we can add any type as a parameter in place of T like Integer, Character, String, Double or any other user-defined type.


8)A type parameter, also known as a type variable, is an identifier that specifies a generic type name. The type parameters can be used 
  to declare the return type and act as placeholders for the types of the arguments passed to the generic method, which are known as 
  actual type arguments.

Example- 'T' is used for non-primitive type  
-------  'N' is used for numbers,etc.



9)Generic methods are methods that introduce their own type parameters. This is similar to declaring a generic type, but the type 
  parameter's scope is limited to the method where it is declared. Static and non-static generic methods are allowed, as well as 
  generic class constructors.


10)`ArrayList` is a class provided by Java that is used to create a dynamic array that can grow or shrink as needed based on the number
    of elements added or removed from it. Its size is not fixed and it can store any type of object.

    On the other hand, ArrayList<T> is a parameterized type that allows you to create an ArrayList of a specific type, where <T> 
    represents the type parameter. This provides type safety at compile time and ensures that only the specified type of elements can be 
    added to the list.It's worth noting that parameterized types like `ArrayList<T>` are not instantiable, which means you cannot create
    an instance of them directly because the type parameter is not yet known. Instead, you can create an instance by specifying the type
    parameter like- 
   
    "ArrayList<Integer> numbers = new ArrayList<Integer>();"






*************************************************************END*************************************************************************



